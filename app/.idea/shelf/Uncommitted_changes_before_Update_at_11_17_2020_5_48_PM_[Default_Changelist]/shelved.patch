Index: src/main/java/com/themusicians/musiclms/nodeViews/AssignmentOverviewAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themusicians.musiclms.nodeViews;\r\n\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.firebase.ui.database.FirebaseRecyclerAdapter;\r\nimport com.firebase.ui.database.FirebaseRecyclerOptions;\r\nimport com.themusicians.musiclms.R;\r\nimport com.themusicians.musiclms.entity.Node.Assignment;\r\n\r\nimport java.text.DateFormat;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\n/**\r\n * The adapter for the Assignment Form pages\r\n *\r\n * @author Nathan Tsai\r\n * @since Nov 16, 2020\r\n */\r\n\r\n// FirebaseRecyclerAdapter is a class provided by\r\n// FirebaseUI. it provides functions to bind, adapt and show\r\n// database contents in a Recycler View\r\npublic class AssignmentOverviewAdapter\r\n    extends FirebaseRecyclerAdapter<Assignment, AssignmentOverviewAdapter.AssignmentsViewholder> {\r\n\r\n  private ItemClickListener itemClickListener;\r\n\r\n  public AssignmentOverviewAdapter(@NonNull FirebaseRecyclerOptions<Assignment> options) {\r\n    super(options);\r\n  }\r\n\r\n  // Function to bind the view in Card view(here\r\n  // \"person.xml\") iwth data in\r\n  // assignment class(here \"person.class\")\r\n  @Override\r\n  protected void onBindViewHolder(\r\n      @NonNull AssignmentsViewholder holder, int position, @NonNull Assignment assignment) {\r\n\r\n    holder.assignmentName.setText(assignment.getName());\r\n\r\n    if (assignment.getUid() != null) {\r\n      holder.authorName.setText(String.format(\"%s...\", assignment.getUid().substring(0, 20)));\r\n    }\r\n\r\n    Date date = new Date(assignment.getDueDate());\r\n    DateFormat dateFormat = new SimpleDateFormat( String.valueOf(R.string.date_format__month_day) );\r\n    holder.dueDate.setText(dateFormat.format(date));\r\n\r\n    holder.editAssignment.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n            if (itemClickListener != null) {\r\n              itemClickListener.onEditButtonClick( \"editAssignment\", assignment.getId() );\r\n            }\r\n          }\r\n        });\r\n  }\r\n\r\n  // Function to tell the class about the Card view (here\r\n  // \"Assignment.xml\")in\r\n  // which the data will be shown\r\n  @NonNull\r\n  @Override\r\n  public AssignmentsViewholder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n    View view =\r\n        LayoutInflater.from(parent.getContext())\r\n            .inflate(R.layout.viewholder_assignment_overview, parent, false);\r\n    return new AssignmentOverviewAdapter.AssignmentsViewholder(view);\r\n  }\r\n\r\n  // Sub Class to create references of the views in Crad\r\n  // view (here \"person.xml\")\r\n  class AssignmentsViewholder extends RecyclerView.ViewHolder {\r\n    TextView assignmentName, authorName, dueDate;\r\n    Button editAssignment;\r\n\r\n    public AssignmentsViewholder(@NonNull View itemView) {\r\n      super(itemView);\r\n\r\n      assignmentName = itemView.findViewById(R.id.assignmentName);\r\n      authorName = itemView.findViewById(R.id.authorName);\r\n      dueDate = itemView.findViewById(R.id.dueDate);\r\n      editAssignment = itemView.findViewById(R.id.edit_button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow users to click the edit button\r\n   *\r\n   * From: https://stackoverflow.com/questions/39551313/\r\n   */\r\n  public interface ItemClickListener {\r\n    void onEditButtonClick(String type, String entityId);\r\n  }\r\n\r\n  public void addItemClickListener(ItemClickListener listener) {\r\n    itemClickListener = listener;\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/themusicians/musiclms/nodeViews/AssignmentOverviewAdapter.java	(revision e77ab4d33761baf826ad35bac7cbd869ccea56df)
+++ src/main/java/com/themusicians/musiclms/nodeViews/AssignmentOverviewAdapter.java	(date 1605664033393)
@@ -17,6 +17,7 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Locale;
 
 /**
  * The adapter for the Assignment Form pages
@@ -50,9 +51,12 @@
       holder.authorName.setText(String.format("%s...", assignment.getUid().substring(0, 20)));
     }
 
-    Date date = new Date(assignment.getDueDate());
-    DateFormat dateFormat = new SimpleDateFormat( String.valueOf(R.string.date_format__month_day) );
-    holder.dueDate.setText(dateFormat.format(date));
+    if (assignment.getDueDate() != 0) {
+      Date date = new Date(assignment.getDueDate());
+//      DateFormat dateFormat = new SimpleDateFormat( getText(R.string.date_format__month_day), Locale.CANADA);
+      DateFormat dateFormat = new SimpleDateFormat( "MMM d", Locale.CANADA);
+      holder.dueDate.setText(dateFormat.format(date));
+    }
 
     holder.editAssignment.setOnClickListener(
         new View.OnClickListener() {
Index: src/main/java/com/themusicians/musiclms/nodeForms/AssignmentCreateFormActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themusicians.musiclms.nodeForms;\r\n\r\nimport android.app.Activity;\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.DialogFragment;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.firebase.ui.database.FirebaseRecyclerOptions;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.themusicians.musiclms.R;\r\nimport com.themusicians.musiclms.attachmentDialogs.AddAttachmentDialogFragment;\r\nimport com.themusicians.musiclms.attachmentDialogs.AddCommentDialogFragment;\r\n//import com.themusicians.musiclms.attachmentDialogs.AddFileDialogFragment;\r\nimport com.themusicians.musiclms.attachmentDialogs.AddFileDialogFragment;\r\nimport com.themusicians.musiclms.entity.Attachment.Comment;\r\nimport com.themusicians.musiclms.entity.Node.Assignment;\r\nimport com.themusicians.musiclms.entity.Node.ToDoItem;\r\nimport com.themusicians.musiclms.nodeViews.AssignmentOverviewActivity;\r\nimport com.themusicians.musiclms.nodeViews.AssignmentOverviewAdapter;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.Calendar;\r\nimport java.util.GregorianCalendar;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.TimeZone;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport static com.themusicians.musiclms.nodeForms.ToDoTaskCreateFormActivity.RETURN_INTENT_TODO_ID;\r\n\r\npublic class AssignmentCreateFormActivity extends AppCompatActivity\r\n                                          implements AddAttachmentDialogFragment.AddAttachmentDialogListener, ToDoAssignmentFormAdapter.ItemClickListener {\r\n\r\n  /** The Firebase Auth Instance */\r\n  private FirebaseUser currentUser;\r\n\r\n  /** The request code for retrieving to do items  */\r\n  public static final int REQUEST_TODO_ENTITY = 1;\r\n\r\n  /** The request code for retrieving to do items  */\r\n  public static final String ACCEPT_ENTITY_ID = \"ENTITY_ID_FOR_EDIT\";\r\n\r\n  /**\r\n   * Used to restore entity id after instance is saved\r\n   * See: https://stackoverflow.com/q/26359130\r\n   */\r\n  static final String SAVED_ENTITY_ID = \"SAVED_ENTITY_ID\";\r\n\r\n  /** The entity id to edit */\r\n  protected String editEntityId;\r\n\r\n  /** Log tag for editing */\r\n  public static final String LOAD_ASSIGNMENT_TAG = \"Load Assignment To Edit\";\r\n\r\n  protected boolean inEditMode = false;\r\n\r\n  protected Assignment assignment;\r\n\r\n  /** Create recycler view for to do items */\r\n  private RecyclerView toDoItemsRecyclerView;\r\n\r\n  /** Create adapter for to do items */\r\n  ToDoAssignmentFormAdapter toDoItemsAdapter; // Create Object of the Adapter class\r\n\r\n  @Override\r\n  public void onStart() {\r\n    super.onStart();\r\n    // Check if user is signed in (non-null) and update UI accordingly.\r\n    currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n    // If we are editing an assignment\r\n    final EditText AssignmentName   = findViewById(R.id.assignment_name);\r\n    final EditText StudentOrClass   = findViewById(R.id.students_or_class);\r\n    if (inEditMode) {\r\n      assignment.getEntityDatabase().child( editEntityId )\r\n          .addListenerForSingleValueEvent(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(DataSnapshot dataSnapshot) {\r\n              assignment = dataSnapshot.getValue(Assignment.class);\r\n              AssignmentName.setText( assignment.getName() );\r\n              StudentOrClass.setText( assignment.getClassId() );\r\n\r\n              Log.w(LOAD_ASSIGNMENT_TAG, \"loadAssignment:onDataChange\");\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(DatabaseError databaseError) {\r\n              // Getting Post failed, log a message\r\n              Log.w(LOAD_ASSIGNMENT_TAG, \"loadAssignment:onCancelled\", databaseError.toException());\r\n              // ...\r\n            }\r\n          });\r\n    }\r\n  }\r\n\r\n  /** @param savedInstanceState */\r\n  @Override\r\n  protected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n\r\n    // Get id to edit\r\n    Intent intent = getIntent();\r\n    editEntityId = intent.getStringExtra(ACCEPT_ENTITY_ID);\r\n\r\n    assignment = new Assignment();\r\n\r\n    if (editEntityId != null) {\r\n      inEditMode = true;\r\n    }\r\n\r\n    setContentView(R.layout.activity_assignment_create_form);\r\n\r\n    // Get fields\r\n    final EditText AssignmentName   = findViewById(R.id.assignment_name);\r\n    final EditText StudentOrClass   = findViewById(R.id.students_or_class);\r\n    final EditText dueDate          = findViewById(R.id.dueDate);\r\n\r\n    // Due Date Popup\r\n    dueDate.setInputType(InputType.TYPE_NULL);\r\n    Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"PDT\"));\r\n    final Calendar cldr = cal.getInstance();\r\n    dueDate.setOnClickListener(new View.OnClickListener() {\r\n      @Override\r\n      public void onClick(View v) {\r\n        int day = cldr.get(Calendar.DAY_OF_MONTH);\r\n        int month = cldr.get(Calendar.MONTH);\r\n        int year = cldr.get(Calendar.YEAR);\r\n        // date picker dialog\r\n        DatePickerDialog picker = new DatePickerDialog(AssignmentCreateFormActivity.this,\r\n            new DatePickerDialog.OnDateSetListener() {\r\n              @Override\r\n              public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {\r\n                dueDate.setText(dayOfMonth + \"/\" + (monthOfYear + 1) + \"/\" + year);\r\n                cldr.set(year, monthOfYear, dayOfMonth);\r\n              }\r\n            }, year, month, day);\r\n        picker.show();\r\n      }\r\n    });\r\n\r\n    // Load the to do tasks\r\n    toDoItemsRecyclerView = findViewById(R.id.todoItemsRecyclerView);\r\n    toDoItemsRecyclerView.setLayoutManager(new GridLayoutManager( AssignmentCreateFormActivity.this, 1));\r\n\r\n    ItemTouchHelper itemTouchHelper = new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {\r\n      @Override\r\n      public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {\r\n        return false;\r\n      }\r\n\r\n      @Override\r\n      public void onSwiped(@NotNull RecyclerView.ViewHolder viewHolder, int swipeDir) {\r\n\r\n//        ToDoAssignmentFormAdapter.ToDoAssignmentFormViewholder swipedAssignment = (ToDoAssignmentFormAdapter.ToDoAssignmentFormViewholder) viewHolder;\r\n\r\n        switch(swipeDir) {\r\n          case ItemTouchHelper.LEFT:\r\n            Snackbar.make(toDoItemsRecyclerView, \"Assignment swiped left\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null)\r\n                .show();\r\n            break;\r\n\r\n          case ItemTouchHelper.RIGHT:\r\n            Snackbar.make(toDoItemsRecyclerView, \"Assignment swiped right\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null)\r\n                .show();\r\n            break;\r\n        }\r\n\r\n        // Remove item from backing list here\r\n        toDoItemsAdapter.notifyDataSetChanged();\r\n      }\r\n    });\r\n    itemTouchHelper.attachToRecyclerView(toDoItemsRecyclerView);\r\n\r\n    // It is a class provide by the FirebaseUI to make a query in the database to fetch appropriate data\r\n    ToDoItem tempToDoItem = new ToDoItem();\r\n    FirebaseRecyclerOptions<ToDoItem> options =\r\n        new FirebaseRecyclerOptions.Builder<ToDoItem>().setQuery(tempToDoItem.getEntityDatabase(), ToDoItem.class).build();\r\n\r\n    // Create new Adapter\r\n    toDoItemsAdapter = new ToDoAssignmentFormAdapter(options);\r\n    toDoItemsAdapter.addItemClickListener(this);\r\n    toDoItemsRecyclerView.setAdapter(toDoItemsAdapter);\r\n\r\n    // Add a task\r\n    // From: https://stackoverflow.com/questions/10407159\r\n    final Button addTask = findViewById(R.id.todoAddItem);\r\n    addTask.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n            Intent intent = new Intent(AssignmentCreateFormActivity.this, ToDoTaskCreateFormActivity.class);\r\n            startActivityForResult(intent, REQUEST_TODO_ENTITY);\r\n          }\r\n        });\r\n\r\n    // Cancel the Assignment\r\n    final Button assignmentCancel = findViewById(R.id.assignmentCancelAction);\r\n    assignmentCancel.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n            Snackbar.make(view, \"Assignment about to be cancelled\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null)\r\n                .show();\r\n            finish();\r\n          }\r\n        });\r\n\r\n\r\n    // Save the Assignment\r\n    final Button assignmentSave = findViewById(R.id.assignmentSaveAction1);\r\n    assignmentSave.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n            // Display notification\r\n            Snackbar.make(view, \"Assignment about to be Saved\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null)\r\n                .show();\r\n\r\n            List<String> dummyList = new LinkedList<>();\r\n            dummyList.add(\"This is an element\");\r\n            dummyList.add(\"This is another element\");\r\n\r\n            // Due Date timestamp\r\n            long dueDateTimestamp = TimeUnit.MILLISECONDS.toSeconds( cldr.getTimeInMillis() );\r\n\r\n            assignment.setName( AssignmentName.getText().toString() );\r\n            assignment.setClassId( StudentOrClass.getText().toString() );\r\n            assignment.setDueDate( dueDateTimestamp );\r\n            assignment.setStatus( true );\r\n            assignment.setUid( currentUser.getUid() );\r\n//            assignment.setAttachmentIds( null );\r\n            assignment.save();\r\n\r\n           //Display notification\r\n            String saveMessage = (editEntityId != null) ? \"Assignment updated\" : \"Assignment Saved\";\r\n            Snackbar.make(view, saveMessage, Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null)\r\n                .show();\r\n          }\r\n        });\r\n\r\n    /*\r\n     * This section will be added to all Nodes. Please use variables to allow us\r\n     * to quickly move these functions into a separate class\r\n     *\r\n     * @todo Save Comment into database\r\n     * @todo Create \"Add File Button\" -> use the same functions\r\n     */\r\n\r\n\r\n    // Add a Comment\r\n    final Button addCommentButton = findViewById(R.id.addCommentButton);\r\n    addCommentButton.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n            String dialogTag = \"addComment\";\r\n            DialogFragment newAddCommentDialog = new AddCommentDialogFragment();\r\n            newAddCommentDialog.show(getSupportFragmentManager(), dialogTag);\r\n          }\r\n        });\r\n\r\n      // Add a File\r\n      final Button addFileButton = findViewById(R.id.addFileButton);\r\n      addFileButton.setOnClickListener(\r\n              new View.OnClickListener() {\r\n                  @Override\r\n                  public void onClick(View view) {\r\n                      String dialogTag = \"addFile\";\r\n                      DialogFragment newAddFileDialog = new AddFileDialogFragment();\r\n                      newAddFileDialog.show(getSupportFragmentManager(), dialogTag);\r\n                  }\r\n              });\r\n  }\r\n\r\n\r\n  @Override\r\n  public void onDialogPositiveClick(DialogFragment dialog) {\r\n    // Get field from dialog\r\n    final EditText AssignmentName = (EditText) findViewById(R.id.assignment_name);\r\n\r\n    Comment newComment = new Comment();\r\n    newComment.setComment( AssignmentName.getText().toString() );\r\n    newComment.save();\r\n\r\n  }\r\n\r\n  @Override\r\n  public void onDialogNegativeClick(DialogFragment dialog) {\r\n    Snackbar.make(findViewById(R.id.createAssignmentLayout), \"Comment Negative clicked\", Snackbar.LENGTH_LONG)\r\n        .setAction(\"Action\", null)\r\n        .show();\r\n\r\n  }\r\n\r\n  // ---- End section to be generalized-----\r\n\r\n  @Override\r\n  public void onSaveInstanceState(Bundle savedInstanceState) {\r\n    assignment.save();\r\n\r\n    // Save the user's current game state\r\n    savedInstanceState.putString(SAVED_ENTITY_ID, assignment.getId());\r\n\r\n    // Always call the superclass so it can save the view hierarchy state\r\n    super.onSaveInstanceState(savedInstanceState);\r\n  }\r\n\r\n  /*\r\n  @Override\r\n  public void onRestoreInstanceState(Bundle savedInstanceState) {\r\n    // Always call the superclass so it can restore the view hierarchy\r\n    super.onRestoreInstanceState(savedInstanceState);\r\n\r\n    // Restore state members from saved instance\r\n    editEntityId = savedInstanceState.getString(SAVED_ENTITY_ID);\r\n  }\r\n  /**/\r\n\r\n  @Override\r\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    super.onActivityResult(requestCode, resultCode, data);\r\n\r\n      if (requestCode == REQUEST_TODO_ENTITY) {\r\n        if(resultCode == Activity.RESULT_OK){\r\n          String toDoId = data.getStringExtra(RETURN_INTENT_TODO_ID);\r\n\r\n          if (assignment.getToDoIds().indexOf(toDoId) > 0) {\r\n            assignment.addToDoId(toDoId);\r\n            assignment.save();\r\n\r\n            //Display notification\r\n            Snackbar.make(findViewById(R.id.createAssignmentLayout), \"To Do Item Saved\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Edit\", null)\r\n                .show();\r\n          }\r\n          else {\r\n            //Display notification\r\n            Snackbar.make(findViewById(R.id.createAssignmentLayout), \"To Do Item Updated\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Edit\", null)\r\n                .show();\r\n          }\r\n\r\n        }\r\n        if (resultCode == Activity.RESULT_CANCELED) {\r\n          //Write your code if there's no result\r\n        }\r\n      }\r\n  }\r\n\r\n  /**\r\n   * Implement onEditButtonClick()\r\n   * @param entityId the entity we are editing\r\n   */\r\n  @Override\r\n  public void onEditButtonClick(String type, String entityId) {\r\n    switch (type) {\r\n      case \"editToDoAssignmentForm\":\r\n        Intent toEditToDoItem = new Intent(AssignmentCreateFormActivity.this, ToDoTaskCreateFormActivity.class);\r\n        toEditToDoItem.putExtra(ACCEPT_ENTITY_ID, entityId);\r\n        startActivityForResult(toEditToDoItem, REQUEST_TODO_ENTITY);\r\n        break;\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/themusicians/musiclms/nodeForms/AssignmentCreateFormActivity.java	(revision e77ab4d33761baf826ad35bac7cbd869ccea56df)
+++ src/main/java/com/themusicians/musiclms/nodeForms/AssignmentCreateFormActivity.java	(date 1605663300882)
@@ -259,6 +259,10 @@
             Snackbar.make(view, saveMessage, Snackbar.LENGTH_LONG)
                 .setAction("Action", null)
                 .show();
+
+            Intent toAssignmentOverview = new Intent(AssignmentCreateFormActivity.this, AssignmentOverviewActivity.class);
+            startActivity(toAssignmentOverview);
+
           }
         });
 
@@ -318,6 +322,11 @@
 
   // ---- End section to be generalized-----
 
+  /**
+   * When creating a new task, we want to save the assignment to
+   * ensure the data (name, due date, etc) are saved with the to do items
+   * @param savedInstanceState
+   */
   @Override
   public void onSaveInstanceState(Bundle savedInstanceState) {
     assignment.save();
Index: src/main/java/com/themusicians/musiclms/nodeForms/ToDoTaskCreateFormActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themusicians.musiclms.nodeForms;\r\n\r\nimport android.app.Activity;\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.InputType;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.CheckBox;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.DialogFragment;\r\n\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.themusicians.musiclms.R;\r\nimport com.themusicians.musiclms.attachmentDialogs.AddAttachmentDialogFragment;\r\nimport com.themusicians.musiclms.attachmentDialogs.AddCommentDialogFragment;\r\nimport com.themusicians.musiclms.attachmentDialogs.AddFileDialogFragment;\r\nimport com.themusicians.musiclms.entity.Attachment.Comment;\r\nimport com.themusicians.musiclms.entity.Node.ToDoItem;\r\n\r\npublic class ToDoTaskCreateFormActivity extends AppCompatActivity\r\n                                          implements AddAttachmentDialogFragment.AddAttachmentDialogListener {\r\n\r\n  /** The Firebase Auth Instance */\r\n  private FirebaseUser currentUser;\r\n\r\n  /** The request code for retrieving to do items  */\r\n  static final int REQUEST_TODO_ENTITY = 1;\r\n  static final String RETURN_INTENT_TODO_ID = \"TODO_ID_KEY\";\r\n\r\n  @Override\r\n  public void onStart() {\r\n    super.onStart();\r\n    // Check if user is signed in (non-null) and update UI accordingly.\r\n    currentUser = FirebaseAuth.getInstance().getCurrentUser();\r\n  }\r\n\r\n  /** @param savedInstanceState */\r\n  @Override\r\n  protected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n\r\n    setContentView(R.layout.activity_to_do_item_create_form);\r\n\r\n    // Get fields\r\n    final EditText ToDoItemName   = findViewById(R.id.to_do_item_name);\r\n    final CheckBox RequireRecording   = findViewById(R.id.require_recording);\r\n\r\n    // Cancel the Assignment\r\n    final Button assignmentCancel = findViewById(R.id.assignmentCancelAction);\r\n    assignmentCancel.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n            Snackbar.make(view, \"To Do Item cancelled\", Snackbar.LENGTH_LONG)\r\n                .show();\r\n\r\n            Intent returnIntent = new Intent();\r\n            setResult(Activity.RESULT_CANCELED, returnIntent);\r\n            finish();\r\n          }\r\n        });\r\n\r\n\r\n    // Save the Assignment\r\n    final Button assignmentSave = findViewById(R.id.assignmentSaveAction1);\r\n    assignmentSave.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n            // Due Date timestamp\r\n            ToDoItem toDoItem = new ToDoItem();\r\n            toDoItem.setStatus( true );\r\n            toDoItem.setUid( currentUser.getUid() );\r\n            toDoItem.setRequireRecording( RequireRecording.isChecked() ? 1 : 0 );\r\n            toDoItem.save();\r\n\r\n            // Return To Do Item\r\n            Intent returnIntent = new Intent();\r\n            returnIntent.putExtra(RETURN_INTENT_TODO_ID, toDoItem.getId());\r\n            setResult(Activity.RESULT_OK, returnIntent);\r\n            finish();\r\n          }\r\n        });\r\n\r\n    /*\r\n     * This section will be added to all Nodes. Please use variables to allow us\r\n     * to quickly move these functions into a separate class\r\n     *\r\n     * @todo Save Comment into database\r\n     * @todo Create \"Add File Button\" -> use the same functions\r\n     */\r\n\r\n\r\n    // Add a Comment\r\n    final Button addCommentButton = findViewById(R.id.addCommentButton);\r\n    addCommentButton.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n            String dialogTag = \"addComment\";\r\n            DialogFragment newAddCommentDialog = new AddCommentDialogFragment();\r\n            newAddCommentDialog.show(getSupportFragmentManager(), dialogTag);\r\n          }\r\n        });\r\n\r\n      // Add a File\r\n      final Button addFileButton = findViewById(R.id.addFileButton);\r\n      addFileButton.setOnClickListener(\r\n              new View.OnClickListener() {\r\n                  @Override\r\n                  public void onClick(View view) {\r\n                      String dialogTag = \"addFile\";\r\n                      DialogFragment newAddFileDialog = new AddFileDialogFragment();\r\n                      newAddFileDialog.show(getSupportFragmentManager(), dialogTag);\r\n                  }\r\n              });\r\n  }\r\n\r\n\r\n  @Override\r\n  public void onDialogPositiveClick(DialogFragment dialog) {\r\n    // Get field from dialog\r\n    final EditText AssignmentName = (EditText) findViewById(R.id.assignment_name);\r\n\r\n    Comment newComment = new Comment();\r\n    newComment.setComment( AssignmentName.getText().toString() );\r\n    newComment.save();\r\n\r\n  }\r\n\r\n  @Override\r\n  public void onDialogNegativeClick(DialogFragment dialog) {\r\n    Snackbar.make(findViewById(R.id.createAssignmentLayout), \"Comment Negative clicked\", Snackbar.LENGTH_LONG)\r\n        .setAction(\"Action\", null)\r\n        .show();\r\n\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/themusicians/musiclms/nodeForms/ToDoTaskCreateFormActivity.java	(revision e77ab4d33761baf826ad35bac7cbd869ccea56df)
+++ src/main/java/com/themusicians/musiclms/nodeForms/ToDoTaskCreateFormActivity.java	(date 1605662262759)
@@ -76,6 +76,7 @@
           public void onClick(View view) {
             // Due Date timestamp
             ToDoItem toDoItem = new ToDoItem();
+            toDoItem.setName( ToDoItemName.getText().toString() );
             toDoItem.setStatus( true );
             toDoItem.setUid( currentUser.getUid() );
             toDoItem.setRequireRecording( RequireRecording.isChecked() ? 1 : 0 );
Index: src/main/java/com/themusicians/musiclms/nodeViews/AssignmentOverviewActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.themusicians.musiclms.nodeViews;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.ItemTouchHelper;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport com.firebase.ui.database.FirebaseRecyclerOptions;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.themusicians.musiclms.Placeholder;\r\nimport com.themusicians.musiclms.R;\r\nimport com.themusicians.musiclms.entity.Node.Assignment;\r\nimport com.themusicians.musiclms.myLogin;\r\nimport com.themusicians.musiclms.nodeForms.AssignmentCreateFormActivity;\r\nimport com.themusicians.musiclms.userProfile;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static com.themusicians.musiclms.nodeForms.AssignmentCreateFormActivity.ACCEPT_ENTITY_ID;\r\n\r\n/**\r\n * Displays the assignments\r\n *\r\n * <p>Based on\r\n * https://www.geeksforgeeks.org/how-to-populate-recyclerview-with-firebase-data-using-firebaseui-in-android-studio/\r\n *\r\n * @contributor\r\n * @author Nathan Tsai\r\n * @since Nov 7, 2020\r\n */\r\npublic class AssignmentOverviewActivity extends AppCompatActivity implements AssignmentOverviewAdapter.ItemClickListener {\r\n  FirebaseAuth fAuth;\r\n\r\n  private RecyclerView recyclerView;\r\n  AssignmentOverviewAdapter adapter; // Create Object of the Adapter class\r\n  DatabaseReference mbase; // Create object of the\r\n  // Firebase Realtime Database\r\n\r\n  /**\r\n   * To Group elements, see this tutorial: https://stackoverflow.com/questions/34848401/divide-elements-on-groups-in-recyclerview\r\n   * @param savedInstanceState\r\n   */\r\n  @Override\r\n  protected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    setContentView(R.layout.activity_assignment_overview);\r\n\r\n    // Create a instance of the database and get\r\n    // its reference\r\n    Assignment tempAssignment = new Assignment();\r\n    mbase = FirebaseDatabase.getInstance().getReference(tempAssignment.getBaseTable());\r\n    recyclerView = findViewById(R.id.recycler1);\r\n\r\n    // To display the Recycler view using grid layout for slide functionality\r\n    recyclerView.setLayoutManager(new GridLayoutManager( AssignmentOverviewActivity.this, 1));\r\n\r\n    ItemTouchHelper itemTouchHelper = new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {\r\n      @Override\r\n      public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {\r\n        return false;\r\n      }\r\n\r\n      @Override\r\n      public void onSwiped(@NotNull RecyclerView.ViewHolder viewHolder, int swipeDir) {\r\n\r\n//        AssignmentOverviewAdapter.AssignmentsViewholder swipedAssignment = (AssignmentOverviewAdapter.AssignmentsViewholder) viewHolder;\r\n\r\n        switch(swipeDir) {\r\n          case ItemTouchHelper.LEFT:\r\n            Snackbar.make(recyclerView, \"Assignment swiped left\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null)\r\n                .show();\r\n            break;\r\n\r\n          case ItemTouchHelper.RIGHT:\r\n            Snackbar.make(recyclerView, \"Assignment swiped right\", Snackbar.LENGTH_LONG)\r\n                .setAction(\"Action\", null)\r\n                .show();\r\n            break;\r\n        }\r\n\r\n        // Remove item from backing list here\r\n        adapter.notifyDataSetChanged();\r\n      }\r\n    });\r\n    itemTouchHelper.attachToRecyclerView(recyclerView);\r\n\r\n    // It is a class provide by the FirebaseUI to make a query in the database to fetch appropriate data\r\n    FirebaseRecyclerOptions<Assignment> options =\r\n        new FirebaseRecyclerOptions.Builder<Assignment>().setQuery(mbase, Assignment.class).build();\r\n\r\n    // Create new Adapter\r\n    adapter = new AssignmentOverviewAdapter(options);\r\n    adapter.addItemClickListener(this);\r\n    recyclerView.setAdapter(adapter);\r\n\r\n\r\n    /** Set the action button to add a new assignment */\r\n    FloatingActionButton fab = findViewById(R.id.createAssignment);\r\n    fab.setOnClickListener(\r\n        new View.OnClickListener() {\r\n          @Override\r\n          public void onClick(View view) {\r\n\r\n            //        Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n            //            .setAction(\"Action\", null).show();\r\n\r\n            Intent redirectToAssignmentCreate =\r\n                new Intent(AssignmentOverviewActivity.this, AssignmentCreateFormActivity.class);\r\n            startActivity(redirectToAssignmentCreate);\r\n          }\r\n        });\r\n  }\r\n\r\n  // Function to tell the app to start getting\r\n  // data from database on starting of the activity\r\n  @Override\r\n  protected void onStart() {\r\n    super.onStart();\r\n    adapter.startListening();\r\n  }\r\n\r\n  // Function to tell the app to stop getting\r\n  // data from database on stoping of the activity\r\n  @Override\r\n  protected void onStop() {\r\n    super.onStop();\r\n    adapter.stopListening();\r\n  }\r\n\r\n  @Override\r\n  public boolean onCreateOptionsMenu(Menu menu) {\r\n    MenuInflater inflater = getMenuInflater();\r\n    inflater.inflate(R.menu.main_menu, menu);\r\n    return true;\r\n  }\r\n\r\n  @Override\r\n  public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n    fAuth = FirebaseAuth.getInstance();\r\n    switch (item.getItemId()) {\r\n      case R.id.logout:\r\n        fAuth.signOut();\r\n        Intent logout = new Intent(AssignmentOverviewActivity.this, myLogin.class);\r\n        startActivity(logout);\r\n        return true;\r\n      case R.id.userprofile:\r\n        Intent toUserProfile = new Intent(AssignmentOverviewActivity.this, userProfile.class);\r\n        startActivity(toUserProfile);\r\n        return true;\r\n      case R.id.createassignment:\r\n        Intent toCreateAssignment = new Intent(AssignmentOverviewActivity.this, AssignmentCreateFormActivity.class);\r\n        startActivity(toCreateAssignment);\r\n        return true;\r\n    }\r\n    return super.onOptionsItemSelected(item);\r\n  }\r\n\r\n  /**\r\n   * Run this function when clicking the edit button\r\n   * @param entityId\r\n   */\r\n  @Override\r\n  public void onEditButtonClick(String type, String entityId) {\r\n    switch(type) {\r\n      case \"editAssignment\":\r\n        Intent toCreateAssignment = new Intent(AssignmentOverviewActivity.this, AssignmentCreateFormActivity.class);\r\n        toCreateAssignment.putExtra(ACCEPT_ENTITY_ID, entityId);\r\n        startActivity(toCreateAssignment);\r\n        break;\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/themusicians/musiclms/nodeViews/AssignmentOverviewActivity.java	(revision e77ab4d33761baf826ad35bac7cbd869ccea56df)
+++ src/main/java/com/themusicians/musiclms/nodeViews/AssignmentOverviewActivity.java	(date 1605662507385)
@@ -82,6 +82,7 @@
             Snackbar.make(recyclerView, "Assignment swiped left", Snackbar.LENGTH_LONG)
                 .setAction("Action", null)
                 .show();
+            
             break;
 
           case ItemTouchHelper.RIGHT:
